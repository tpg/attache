<?php
/**
 * attache deploy <server>.
 *
 * Deploy the current project to the given server.
 * Servers are defined in the configuration file.
 */

declare(strict_types=1);

namespace TPG\Attache\Commands;

use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use TPG\Attache\Contracts\DeployerInterface;
use TPG\Attache\Deployer;

class DeployCommand extends Command
{
    protected string $name = 'deploy';
    protected string $description = 'Deploy to the specified server';
    protected bool $requireConfig = true;
    protected bool $requireServer = true;

    protected Deployer $deployer;

    protected function configure(): void
    {
        parent::configure();
        $this->addOption('prune', 'p', InputOption::VALUE_OPTIONAL, 'Prune old releases once deployment is complete', 2);
    }

    protected function initialize(InputInterface $input, OutputInterface $output): void
    {
        parent::initialize($input, $output); // TODO: Change the autogenerated stub

        $this->setDeployer(
            new Deployer($this->filesystem, $this->server)
        );
    }

    protected function setDeployer(DeployerInterface $deployer): void
    {
        $this->deployer = $deployer;
    }

    protected function fire(): int
    {
        $releaseId = date('YmdHis');

        $progressBar = $this->initProgressBar();

        $this->deployer->deploy($releaseId, function ($type, $host, $output, $status) use ($progressBar) {
            if ($progressBar) {
                $progressBar->setMessage($status);
                $progressBar->advance();
            } elseif ($this->output->isVerbose()) {
                $this->output->writeln($output);
            }
        });

        if ($progressBar) {
            $progressBar?->finish();

            $progressBar->clear();
        }

        return 0;
    }

    protected function initProgressBar(): ?ProgressBar
    {
        if ($this->output->isVerbose()) {
            return null;
        }

        $progressBar = new ProgressBar($this->output);
        $progressBar->setFormat('%message%'."\n".'[%bar%]');
        $progressBar->setBarCharacter('<comment>=</comment>');
        $progressBar->setProgressCharacter('>');

        return $progressBar;
    }
}
